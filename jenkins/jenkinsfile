pipeline {
    agent any

    environment {
        GOOGLE_APPLICATION_CREDENTIALS = "${WORKSPACE}/terraform/terraform-key.json"
    }

    stages {
        stage('Definir Ambiente') {
            steps {
                script {
                    env.AMBIENTE = (env.BRANCH_NAME == 'main') ? 'prod' : 'dev'
                }
            }
        }

        stage('Checkout do Código') {
            steps {
                git branch: env.BRANCH_NAME, credentialsId: 'github-cred', url: 'git@github.com:ivanmd96/projeto-cloud-gcp.git'
            }
        }

        stage('Criar Bucket do Backend (se necessário)') {
            steps {
                dir('terraform') {
                    sh '''
                        terraform init -backend=false
                        terraform apply -target=module.bucket -auto-approve \
                            -var="bucket_name=terraform-state-projeto-cloud" \
                            -var="bucket_location=US" \
                            -var="credentials_path=$GOOGLE_APPLICATION_CREDENTIALS"
            '''
                 }
             }
        }

        stage('Terraform Init') {
            steps {
                sh "cd terraform 
                sh ""terraform init -backend-config="credentials=${env.GOOGLE_APPLICATION_CREDENTIALS}" \\
                       -backend-config="bucket=terraform-state-projeto-cloud" \\
                       -backend-config="prefix=env/${env.AMBIENTE}""
            }
        }
        
        stage('Validar Terraform') {
            steps {
                sh 'cd terraform && terraform fmt -check'
                sh 'cd terraform && terraform validate'
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([
                    string(credentialsId: 'ssh-public-key', variable: 'SSH_PUB_KEY'),
                    file(credentialsId: 'terraform-key', variable: 'GOOGLE_CREDENTIALS')
                ]) {
                    sh """
                        cd terraform
                        terraform apply \
                          -var='ssh_public_key=$SSH_PUB_KEY' \
                          -var-file=environments/${env.AMBIENTE}.tfvars \
                          -var="credentials_path=$GOOGLE_CREDENTIALS" \
                          -auto-approve
                    """
                }
            }
        }

        stage('Gerar Inventory Ansible') {
            steps {
                dir('terraform') {
                    script {
                        def instance_ip = sh(
                            script: "terraform output -raw instance_ip",
                            returnStdout: true
                        ).trim()

                        writeFile file: '../ansible/inventory', text: """[vm]
vm ansible_host=${instance_ip} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa
"""
                    }
                }
            }
        }

        stage('Configurar Ansible') {
            steps {
                sh 'cd ansible && ansible-playbook -i inventory playbook.yml --check'
            }
        }
    }
}
