pipeline {
    agent any

    environment {
        GOOGLE_APPLICATION_CREDENTIALS = "${WORKSPACE}/terraform/terraform-key.json"
    }

    stages {
        stage('Definir Ambiente') {
            steps {
                script {
                    env.AMBIENTE = (env.BRANCH_NAME == 'main') ? 'prd' : 'dev'
                }
            }
        }

        stage('Checkout do Código') {
            steps {
                git branch: env.BRANCH_NAME, credentialsId: 'github-cred', url: 'git@github.com:ivanmd96/projeto-cloud-gcp.git'
            }
        }

        stage('Terraform Init') {
            steps {
                withCredentials([
                    file(credentialsId: 'terraform-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')
                ]) {
                    dir("terraform") {
                        sh """
                            terraform init -reconfigure \
                                -backend-config="credentials=${GOOGLE_APPLICATION_CREDENTIALS}" \
                                -backend-config="bucket=terraform-state-projeto-cloud" \
                                -backend-config="prefix=env/$AMBIENTE"
                        """
                    }
                }
            }
        }

        stage('Validar Terraform') {
            steps {
                dir("terraform") {
                    sh 'terraform fmt -recursive -diff'
                    sh 'terraform validate'
                }
            }
        }

        stage('Importar VM (se necessário)') {
            steps {
                withCredentials([
                    string(credentialsId: 'ssh-public-key', variable: 'SSH_PUB_KEY'),
                    file(credentialsId: 'terraform-key', variable: 'GOOGLE_CREDENTIALS')
                ]) {
                    dir("terraform") {
                        sh '''
                            terraform state list | grep "module.vm.google_compute_instance.vm" || \
                            terraform import \
                                -var="ssh_public_key=$SSH_PUB_KEY" \
                                -var="credentials_path=$GOOGLE_CREDENTIALS" \
                                -var-file="environments/$AMBIENTE/${AMBIENTE}.tfvars" \
                                module.vm.google_compute_instance.vm \
                                projects/projeto-cloud-estudo/zones/us-central1-a/instances/vm-$AMBIENTE
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([
                 string(credentialsId: 'ssh-public-key', variable: 'SSH_PUB_KEY'),
                 file(credentialsId: 'terraform-key', variable: 'GOOGLE_CREDENTIALS')
                ]) {
                 dir("terraform") {
                        sh '''
                            terraform apply \
                                -auto-approve \
                                -var="ssh_public_key=$SSH_PUB_KEY" \
                                -var="credentials_path=$GOOGLE_CREDENTIALS" \
                                -var-file="environments/$AMBIENTE/${AMBIENTE}.tfvars"
                            '''

                    }
                }
            }
        }

        stage('Gerar Inventory Ansible') {
            steps {
                dir("terraform") {
                    script {
                        def instance_ip = sh(
                            script: "terraform output -raw instance_ip",
                            returnStdout: true
                        ).trim()

                        writeFile file: "../ansible/inventory", text: """[vm]
vm_$AMBIENTE ansible_host=${instance_ip} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa
"""
                    }
                }
            }
        }

        stage('Configurar Ansible') {
            steps {
                dir('ansible') {
                    sh 'ansible-playbook -i inventory playbook.yml --check'
                }
            }
        }
    }
}
